import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { HashLoader } from "react-spinners";
import type { InferGetStaticPropsType, GetStaticProps } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import { useState } from "react";
import { getTweets, getTwitterId } from "@/lib/utils";

export default function Question({
  name,
  username,
  pic,
  result,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  const router = useRouter();
  const { status } = useSession();
  const [aiResponse, setAiResponse] = useState<{
    answer: string;
    analysis: string;
  } | null>(null);
  const [isLoadingAnalysis, setIsLoadingAnalysis] = useState(false);
  if (status === "loading") {
    return (
      <main className="flex flex-col items-center justify-center min-h-screen">
        <p>Loading...</p>
      </main>
    );
  }

  if (status === "unauthenticated") {
    return (
      <main className="flex flex-col items-center justify-center min-h-screen">
        <p>
          <button type="button" onClick={() => signIn()}>
            Sign in
          </button>
        </p>
      </main>
    );
  }

  const analyzeTweets = async (question: string) => {
    if (question.length > 5) {
      try {
        setIsLoadingAnalysis(true);
        const res = await fetch("/api/tweets/question", {
          method: "POST",
          body: JSON.stringify({ question, username, tweets: result }),
        });
        if (res.ok) {
          const resJson = await res.json();
          const analysisResult = resJson.data;
          setAiResponse(analysisResult);
        } else {
          setAiResponse({
            answer:
              "Sorry, we couldn't analyze this question. Please try again later.",
            analysis:
              "Sorry, we couldn't analyze this question. Please try again later.",
          });
        }
        setIsLoadingAnalysis(false);
      } catch (error) {
        setIsLoadingAnalysis(false);
        setAiResponse(null);
      }
    } else {
      setAiResponse(null);
    }
  };

  return (
    <>
      <Head>
        <title>{`Perspec - ${router.isFallback ? "loading" : username}`}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col items-center w-full min-h-screen">
        <div className="w-full flex justify-end px-8 py-4">
          <button type="button" onClick={() => signOut()}>
            Sign out
          </button>
        </div>
        <div className="flex flex-col w-full px-8 max-w-6xl flex-grow items-center justify-center">
          {!router.isFallback ? (
            <>
              {pic && (
                <Image
                  src={pic}
                  width={150}
                  height={150}
                  priority
                  quality={100}
                  className="rounded-full"
                  alt=""
                />
              )}
              <p className="mt-1 font-bold text-4xl">{`@${username.replace(
                "@",
                ""
              )}`}</p>
              <p className="text-md mt-1">{name}</p>
              <input
                type="text"
                className="w-full max-w-xl mt-12 text-sm px-4 py-2 bg-black/10 rounded-full focus:outline-none"
                onKeyDown={(e) => {
                  if (e.key === "Enter") {
                    setAiResponse(null);
                    analyzeTweets(e.currentTarget.value);
                  }
                }}
              />
              {isLoadingAnalysis && (
                <div className="flex items-center mt-8 h-full justify-center">
                  <HashLoader size={50} />
                </div>
              )}
              {aiResponse && (
                <>
                  <p className="w-full mt-8 font-bold text-lg">{name}:</p>
                  <p className="whitespace-pre-wrap leading-5 w-full">
                    {aiResponse.answer.trim()}
                  </p>
                </>
              )}
              {aiResponse && (
                <>
                  <p className="w-full mt-8 font-bold text-lg">
                    Meta Analysis:
                  </p>
                  <p className="w-full whitespace-pre-wrap leading-5">
                    {aiResponse.analysis.trim()}
                  </p>
                </>
              )}
            </>
          ) : (
            <div className="flex items-center h-full justify-center">
              <HashLoader size={100} />
            </div>
          )}
        </div>
      </main>
    </>
  );
}

export const getStaticProps: GetStaticProps = async (context) => {
  const username = context.params?.username as string | undefined;

  if (!username) {
    return {
      props: {
        name: "Unknown",
        username: "Invalid user",
        pic: null,
        result: "Missing username",
      },
      revalidate: false,
    };
  }

  const { name, id, pic } = await getTwitterId(username);

  if (!id || !name) {
    return {
      props: {
        name: "Unknown",
        username,
        pic: null,
        result: "Failed to find user",
      },
      revalidate: false,
    };
  }

  //Get all tweets
  const tweets = await getTweets(1, id, true, true);

  if (tweets.length == 0) {
    return {
      props: {
        name,
        username,
        pic,
        result: "Failed to retrieve tweets",
      },
      revalidate: 60,
    };
  }

  return {
    props: {
      name,
      username,
      pic: pic ?? null,
      result: tweets,
    },
    revalidate: false,
  };
};

export async function getStaticPaths() {
  return {
    paths: [{ params: { username: "elonmusk" } }],
    fallback: true,
  };
}
