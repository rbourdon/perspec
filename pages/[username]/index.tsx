import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import { Client } from "twitter-api-sdk";
import { text } from "stream/consumers";
import { useRouter } from "next/router";
import { HashLoader } from "react-spinners";
import { authOptions } from "pages/api/auth/[...nextauth]";
import { getServerSession } from "next-auth/next";
import type { InferGetStaticPropsType, GetStaticProps } from "next";

const inter = Inter({ subsets: ["latin"] });

export default function Home({
  username,
  result,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  const router = useRouter();
  return (
    <>
      <Head>
        <title>{`Perspec - ${router.isFallback ? "loading" : username}`}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center min-h-screen">
        <div className="flex flex-col px-8 max-w-6xl py-4 min-h-screen items-center justify-center">
          {!router.isFallback ? (
            <>
              <p className="font-bold text-4xl">{`@${username}`}</p>
              <p className="mt-8 whitespace-pre-wrap">{result}</p>
            </>
          ) : (
            <div className="flex items-center h-full justify-center">
              <HashLoader size={100} />
            </div>
          )}
        </div>
      </main>
    </>
  );
}

export const getStaticProps: GetStaticProps = async (context) => {
  const username = context.params?.username as string;
  const { Configuration, OpenAIApi } = require("openai");

  //Return erro if missing env vars
  if (
    !process.env.TWITTER_BEARER_TOKEN ||
    !process.env.OPENAI_API_KEY ||
    !username
  ) {
    return { props: { username, result: "Environment Configuration Error" } };
  }

  const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
  });
  const openai = new OpenAIApi(configuration);
  const client = new Client(process.env.TWITTER_BEARER_TOKEN);

  const idResponse = await client.users.findUserByUsername(username);

  if (!idResponse.data?.id) {
    return { props: { username, result: "No user found" } };
  }

  const tweets1 = await client.tweets.usersIdTweets(idResponse.data?.id, {
    max_results: 100,
    exclude: ["replies", "retweets"],
  });

  if (!tweets1?.meta?.oldest_id) {
    return { props: { username, result: "Failed to load twitter metadata" } };
  }

  const tweets2 = await client.tweets.usersIdTweets(idResponse.data?.id, {
    max_results: 100,
    until_id: tweets1.meta.oldest_id,
    exclude: ["replies", "retweets"],
  });

  if (!tweets1?.data) {
    return { props: { username, result: "Failed to load tweets" } };
  }

  const tweets = [...tweets1.data, ...(tweets2.data ? tweets2.data : [])];
  const tweetText = tweets
    .map((tweet) => tweet.text)
    .filter((text) => text.split(" ").length > 6)
    .join(" ")
    .replace(/(?:https?|ftp):\/\/[\n\S]+/g, "")
    .replaceAll("\n", " ")
    .replaceAll("  ", " ")
    .split(" ")
    .slice(0, 2300)
    .join(" ");
  console.log(tweetText.slice(0, tweetText.lastIndexOf(".") + 1));
  console.log(tweetText.split(" ").length);
  const response = await openai.createCompletion({
    model: "text-davinci-003",
    prompt: `Acting as a psychiatrist, desribe the author of these tweets in detail and then make a list of some of their personal values and interests: ${tweetText.slice(
      0,
      tweetText.lastIndexOf(".") + 1
    )}`,
    temperature: 0.85,
    max_tokens: 500,
  });
  console.log(response.data.choices[0].text);
  return {
    props: { username, result: response.data.choices[0].text }, // will be passed to the page component as props
  };
};

export async function getStaticPaths() {
  return {
    paths: [{ params: { username: "rorybourdon" } }],
    fallback: true, // can also be true or 'blocking'
  };
}
